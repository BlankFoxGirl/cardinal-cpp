#!/bin/bash
COMPOSE='docker-compose -p CardinalCPP -f Docker/docker-compose.yml'

if [[ -z "$1" ]]
then
    echo "No command specified. Please try again with either 'up', 'down', 'build', or 'run'"
    exit 0
fi

install_submodules_manually() {
    CONTENTS=$(cat .gitmodules | grep -E '(path|url).*' | cut -d " " -f 3)
    CWD=$(pwd)

    LAST=""
    for item in ${CONTENTS[@]};
    do
    cd "$CWD"
    STRINGHEAD=$( echo "$item" | cut -d '/' -f 1)
        if [[ "$STRINGHEAD" == "vendor" ]]
        then
            if [[ -d "$CWD/$item" ]]
            then
                LAST=$(echo "$item")
                echo "$item already exists."
                continue
            fi
            mkdir -p "$item"
            cd "$item"
            LAST=$(echo "$item")
        else
            if [[ -d "$CWD/$LAST/.git" ]]
            then
                echo "$LAST already installed."
                continue
            fi
            cd "$CWD/$LAST"
            echo "Installing $item"
            git init .
            git remote add origin $item
            res=$(git pull origin master 2>&1)
            if [[ "$res" == "fatal: couldn't find remote ref master" ]]
            then
                git pull origin main
            fi
        fi
    done
}

install_modules () {
    CWD=$(pwd)
    if [[ ! -d "$CWD/vendor" ]]
    then
        mkdir "$CWD/vendor"
        git submodules init
        git submodules update
    fi
    if [[ ! -d "$CWD/vendor/crashoz" ]]
    then
        echo "Unable to auto-install using GIT, trying another route."
        install_submodules_manually
    else
        echo "Submodules installed."
    fi
}

if [[ "$1" = "up" ]]
then
    if [[ ! -d vendor ]]
    then
        mkdir vendor
    fi
    $COMPOSE $@
elif [[ "$1" = "down" ]]
then
    $COMPOSE down
elif [[ "$1" = "install_modules" ]]
then
    install_modules
elif [[ "$1" = "clean" ]]
then
    rm -rf build/*
    rm -rf build/.*
elif [[ "$1" = "ninja" ]]
then
    ./dev clean
    /usr/local/bin/cmake --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER='/usr/bin/clang' -DCMAKE_CXX_COMPILER='/usr/bin/clang++' -DCMAKE_MAKE_PROGRAM='/Users/sarahjabado/.vscode/extensions/powertech.powercpp-23.2.24/thirdparty/bin/ninja' -S/Users/sarahjabado/development/cardinal_c++ -B/Users/sarahjabado/development/cardinal_c++/build -G Ninja
elif [[ "$1" = "build" ]]
then
    install_modules
    CWD=$(pwd)
    if [[ ! -f "$CWD/vendor/crashoz/uuid_v4/build/Makefile" ]]
    then
        cd "$CWD/vendor/crashoz/uuid_v4/"
        mkdir build
        cd build
        cmake ..
        make
        cd "$CWD"
    fi
    if [[ ! -f "$CWD/vendor/sewenew/redis-plus-plus/build/Makefile" ]]
    then
        if [[ ! -d "$CWD/vendor/sewenew/redis-plus-plus/build" ]]
        then
            mkdir -p "$CWD/vendor/sewenew/redis-plus-plus/build"
        fi
        cd "$CWD/vendor/sewenew/redis-plus-plus/build"
        pwd
        cmake ..
        make
        cd "$CWD"
    fi

    cd "$CWD/vendor/sewenew/redis-plus-plus/build"
    make install || echo "Cannot install redis-plus-plus on system."
    cd "$CWD"

    if [[ ! -d "$CWD/build" ]]
    then
        mkdir "$CWD/build"
    else
        rm -rf "$CWD/build/*"
    fi

    cd "$CWD/build" && cmake .. && make

    if [[ ! -f "$CWD/build/bin/libredis++.so.1" ]]
    then
        cp "$CWD/vendor/sewenew/redis-plus-plus/build/libredis++.so.1.3.6" "$CWD/build/bin/libredis++.so.1"
    fi
elif [[ "$1" = "run" ]]
then
    ./dev build

    ".$CWD/build/bin/cardinal-server"
elif [[ "$1" = "install" ]]
then
    install_modules
fi
